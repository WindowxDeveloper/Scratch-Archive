'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 23 July 2012 at 12:01:44 pm'!!BlockMorph methodsFor: 'event handling'!rightButtonMenu	| t1 |	t1 _ CustomMenu new.	t1 add: 'help' action: #presentHelpScreen.	(owner isKindOf: ScratchBlockPaletteMorph)		ifFalse: 			[t1 addLine.			t1 add: 'duplicate' action: #duplicate.			t1 add: 'export as scratchblocks' action: #scratchblocks.			(self owner isKindOf: BlockMorph)				ifFalse: [t1 add: 'delete' action: #delete]].	DebugMenu		ifTrue: 			[t1 addLine.			t1 add: 'show tuples' action: #showTuples].	t1 localize; invokeOn: self! !!BlockMorph methodsFor: 'event handling'!scratchblocks	| t1 |	t1 _ WriteStream on: (String new: 10000).	t1 nextPutAll: '[scratchblocks]';	 crlf.	self addScratchblocksTo: t1.	t1 nextPutAll: '[/scratchblocks]'.	ScratchTranslator unicodeClipboardPut: t1 contents.	DialogBoxMorph inform: 'Scratchblocks code copied to clipboard!!' title: 'Success!!'! !!BlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	t1 nextPutAll: self class name;	 crlf.	self nextBlock ifNotNil: [self nextBlock addScratchblocksTo: t1]! !!BlockMorph methodsFor: 'private'!printBlocksSub: t1 on: t2 	(t1 isKindOf: ArgMorph)		ifTrue: 			[(t1 isKindOf: ExpressionArgMorph)				ifTrue: [t1 isNumberExpression						ifTrue: 							[t2 nextPut: $(.							t1 printArgOn: t2.							(t1 isKindOf: ExpressionArgMorphWithMenu)								ifTrue: [t2 nextPutAll: ' v'].							t2 nextPut: $)]						ifFalse: 							[t2 nextPut: $[.							t1 printArgOn: t2.							(t1 isKindOf: ExpressionArgMorphWithMenu)								ifTrue: [t2 nextPutAll: ' v'].							t2 nextPut: $]]].			(t1 isKindOf: ChoiceArgMorph)				ifTrue: 					[t2 nextPut: $[.					t1 printArgOn: t2.					t2 nextPutAll: ' v]'].			(t1 isKindOf: ColorArgMorph)				ifTrue: 					[t2 nextPut: $[.					t1 printHexOn: t2.					t2 nextPut: $]].			(t1 isKindOf: EventTitleMorph)				ifTrue: 					[t2 nextPut: $[.					t2 nextPutAll: t1 eventName.					t2 nextPutAll: ' v]'].			(t1 isKindOf: SpriteArgMorph)				ifTrue: 					[t2 nextPut: $[.					t1 printNameOn: t2.					t2 nextPutAll: ' v]'].			(t1 isKindOf: BooleanArgMorph)				ifTrue: 					[t2 nextPut: $<.					t2 nextPut: $>]].	(t1 isKindOf: BlockMorph)		ifTrue: 			[t1 addScratchblocksTo: t2.			t2 skip: -2].	(t1 isKindOf: StringMorph)		ifTrue: 			[t1 contents = '?' | (t1 contents = '%') ifTrue: [t2 skip: -1].			t2 nextPutAll: t1 contents].	(t1 isKindOf: ImageMorph)		ifTrue: 			[self selector = #turnLeft: ifTrue: [t2 nextPutAll: 'cw'].			self selector = #turnRight: ifTrue: [t2 nextPutAll: 'ccw']]! !!BlockMorph methodsFor: 'private'!printCodeSubmorph: t1 on: t2 	(t1 isKindOf: ArgMorph)		ifTrue: [t1 printArgOn: t2].	(t1 isKindOf: BlockMorph)		ifTrue: 			[t2 nextPut: $(.			t1 addScratchblocksTo: t1.			t2 skip: -1.			t2 nextPut: $)].	(t1 isKindOf: StringMorph)		ifTrue: 			[t1 contents = '?' | (t1 contents = '%') ifTrue: [t2 skip: -1].			t2 nextPutAll: t1 contents]! !!ChoiceArgMorph methodsFor: 'accessing'!printArgOn: t1 	t1 nextPutAll: self labelMorph contents! !!AttributeArgMorph methodsFor: 'accessing'!printNameOn: t1 	self printArgOn: t1! !!ColorArgMorph methodsFor: 'other'!printHexOn: t1 	t1 nextPutAll: '#' , (self hexFor: color red) , (self hexFor: color green) , (self hexFor: color blue)! !!CommandBlockMorph methodsFor: 'menus'!rightButtonMenu	| t1 t2 t3 t4 |	t1 _ CustomMenu new.	t1 add: 'help' action: #presentHelpScreen.	(owner isKindOf: ScratchBlockPaletteMorph)		ifFalse: 			[t1 addLine.			(#(#+ #- #* #/ #\\ ) includes: selector)				ifTrue: [#(#+ #- #* #/ #mod ) with: #(#+ #- #* #/ #\\ ) do: [:t5 :t6 | t1 add: t5 action: t6]].			(#(#< #= #> ) includes: selector)				ifTrue: [#(#< #= #> ) do: [:t6 | t1 add: t6 action: t6]].			(#(#& #| ) includes: selector)				ifTrue: [#(#and #or ) with: #(#& #| ) do: [:t5 :t6 | t1 add: t5 action: t6]].			t1 addLine.			t1 add: 'duplicate' action: #duplicate.			t1 add: 'export to scratchblocks' action: #scratchblocks.			(self owner isKindOf: BlockMorph)				ifFalse: [t1 add: 'delete' action: #delete]].	t2 _ self ownerThatIsA: ScratchFrameMorph.	(t2 notNil and: [#(#sensor: #sensorPressed: ) includes: selector])		ifTrue: 			[t1 addLine.			t1 add: 'show ScratchBoard watcher' action: #showSensorBoard.			t2 workPane scratchServer ifNil: [t1 add: 'enable remote sensor connections' action: #enableRemoteSensors]				ifNotNil: [t1 add: 'disable remote sensor connections' action: #exitScratchSession]].	DebugMenu		ifTrue: 			[t1 addLine.			t1 add: 'show tuples' action: #showTuples].	(t3 _ t1 localize; startUp) ifNil: [^ self].	(#(#presentHelpScreen #duplicate #delete #scratchblocks ) includes: t3)		ifTrue: [^ self perform: t3].	t3 = #showSensorBoard		ifTrue: 			[t2 showSensorBoard.			^ self].	t3 = #enableRemoteSensors		ifTrue: 			[t2 enableRemoteSensors.			^ self].	t3 = #exitScratchSession		ifTrue: 			[t2 exitScratchSession.			^ self].	t3 = #showTuples ifTrue: [^ self showTuples].	t4 _ '%n ' , t3 , ' %n'.	'\\' = t3 ifTrue: [t4 _ ScratchTranslator translationFor: '%n mod %n'].	'&' = t3 ifTrue: [t4 _ ScratchTranslator translationFor: '%b and %b'].	'|' = t3 ifTrue: [t4 _ ScratchTranslator translationFor: '%b or %b'].	self commandSpec: t4.	self selector: t3! !!CommandBlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	| t2 t3 |	t2 _ self nextBlock.	t3 _ false.	submorphs do: [:t4 | t4 ~~ t2			ifTrue: 				[self printBlocksSub: t4 on: t1.				t3 _ true.				t1 space]].	t3 ifTrue: [t1 skip: -1].	t1 crlf.	self nextBlock ifNotNil: [self nextBlock addScratchblocksTo: t1]! !!CBlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	submorphs do: [:t2 | t2 ~~ nestedBlock & (t2 ~~ nextBlock)			ifTrue: 				[self printBlocksSub: t2 on: t1.				t1 space]].	t1 crlf.	nestedBlock ifNotNil: [nestedBlock addScratchblocksTo: t1].	t1 nextPutAll: 'end';	 crlf.	nextBlock ifNotNil: [nextBlock addScratchblocksTo: t1]! !!ExpressionArgMorph methodsFor: 'private'!printArgOn: t1 	t1 nextPutAll: self evaluate asString! !!HatBlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	self printHatNameForScratchblocksOn: t1.	t1 crlf.	self nextBlock ifNotNil: [self nextBlock addScratchblocksTo: t1]! !!HatBlockMorph methodsFor: 'private'!printHatNameForScratchblocksOn: t1 	t1 nextPutAll: 'to ' , scriptNameMorph contents! !!EventHatMorph methodsFor: 'other'!printHatNameForScratchblocksOn: t1 	| t2 |	t2 _ self eventName.	t2 = 'Scratch-StartClicked'		ifTrue: [t1 nextPutAll: 'when gf clicked']		ifFalse: [t1 nextPutAll: 'when I receive [' , t2 , ' v]']! !!IfElseBlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	submorphs do: [:t2 | t2 ~~ trueBlock & (t2 ~~ falseBlock) & (t2 ~~ nextBlock)			ifTrue: 				[self printBlocksSub: t2 on: t1.				t1 space]].	t1 skip: -6;	 crlf.	trueBlock ifNotNil: [trueBlock addScratchblocksTo: t1].	t1 nextPutAll: 'else';	 crlf.	falseBlock ifNotNil: [falseBlock addScratchblocksTo: t1].	t1 nextPutAll: 'end';	 crlf.	nextBlock ifNotNil: [nextBlock addScratchblocksTo: t1]! !!KeyEventHatMorph methodsFor: 'other'!printHatNameForScratchblocksOn: t1 	t1 nextPutAll: 'when [' , scriptNameMorph choice , ' v] key pressed'! !!MouseClickEventHatMorph methodsFor: 'other'!printHatNameForScratchblocksOn: t1 	t1 nextPutAll: 'when [' , self receiverName , '] clicked';	 cr! !!ReporterBlockMorph methodsFor: 'private'!addScratchblocksTo: t1 	| t2 t3 |	t2 _ self nextBlock.	t3 _ false.	self isBooleanReporter		ifTrue: [t1 nextPut: $<]		ifFalse: [t1 nextPut: $(].	submorphs do: [:t4 | t4 ~~ t2			ifTrue: 				[self printBlocksSub: t4 on: t1.				t3 _ true.				t1 space]].	t3 ifTrue: [t1 skip: -1].	self isBooleanReporter		ifTrue: [t1 nextPut: $>]		ifFalse: [t1 nextPut: $)].	t1 crlf.	self nextBlock ifNotNil: [self nextBlock addScratchblocksTo: t1]! !!SpriteArgMorph methodsFor: 'other'!printNameOn: t1 	t1 nextPutAll: self labelMorph contents! !